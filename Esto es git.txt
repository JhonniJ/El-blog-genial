aquí vamos con git.
git es un sistema de control de versiones
guardo los cambios de un archivo en vez de guardar otro 
archivo

Lineas de comandos, atajos para hacer funciones en la
terminal:
- git init - > inicia el repositorio, base de datos donde
se guardan los cambios

- git add nombre del archivo - > agrega un archivo al 
repositorio

-git add . -> agrega todos los archivos de la carpeta al 
repositorio

- git commit -m "mensaje" - > envia los ultimos cambios
al repositorio, y "-m" añade un mensaje, no se puede enviar
un archivo sin un mensaje, nos abre una ventana llamada
vin, que es una editor que permite agregar el mensaje
para salir de Vin presiona esc+shit+zz

-git commit -am "mensaje" convina los dos comandos anteriores


-git status -> muestra el estado del repositorio, si hay
cambios que no hemos guardado nos informa

-git show -> muestra todos los cambios historicos de un
archivo, que cambios se hicieron, para salir de la
ventana se utiliza el control + Q

-git log nombre de archivo -> historia completa del
archivo

_____________
Instalar git en windows es fácil, en el navegador buscamos
git y descargamos, nos sercioragimos de que este
activada la opción gitbash y demás cositas curiosas
para acceder a la terminal de git, busca gitbash en los
archivos windowns

git permite el uso de archivo binario pero no es tan preciso,
lo mejor es usarlo en archivos de
texto plano, este documento por ejemplo o codigo.

_____________
lineas de comandos, esto es complicado
pwd -> muestra donde estamos

cd -> navegar carpetas

ls -> muestra los archivos de donde estamos

ls -al -> lista los archivos con el argumento de también
los ocultos

clear -> limpia la consola, control + L 

rm nombre del archivo -> remover o eliminar

mkdir nombre carpeta -> crea una carpeta

touch nombre de archivo -> crea un archivo vacio

cat nombre del archivo -> muestra el contenido del 
archivo 

history -> historial de comandos de hechos

git diff "commit a" "commit b" -> comando que compara 
la version a con la b, la primera comparación debe 
ser la antigua. además si tenemos un archivo en staging
y hacemos git diff podemos ver los cambios que tenemos
entre archivo agregado en stagin y el directorio

git log --stat -> muestra la historia de los archivos
con los cambios y con "q" salgo de la pantalla

_____________
Por defecto git requiere el nombre de usuario para
mandar los commits para solucionar esto entramos a git 
config --global (con doble guion se usa en palabras) 
user.name "nuestro nombre"


para volver a una versión anterior usamos git reset
(commit al que queremos volver) tenemos que 
especificar el tipo de reset:

--soft suave volvemos a tras pero si tenemos algo en 
stagin,un cambio agregado a la memoria pero no enviado
al repositorio.

--hard duro volvemos atras total sin posibilida de 
volver. elimina lo todos los demás commits

- git checkout "commit pasado" "nombre archivo"-> 
volvemos a una versión interior ya sea para verla
o actualizarla

_____________
Para trabajar de manera colaborativa se requiere que haya
un repositorio remoto donde va a estar el proyecto
unificado, puede ser Github, Gitlab o nuestro
propio servidor.
para traer el proyecto a tu maquina no se usa git init
se usa git clone url, es decir no vamos a iniciar un 
proyectoen nuestra maquina, nos vamos a traer un proyecto
del repositorio, este git clone traer todo todito tanto
los archivio como el respositorio, la base de datos 
atomica 
-git push -> envia los cambios de nuestro respositorio 
al repositorio remoto

-git fetch -> trae los cambios o actualizaciones
a nuestro repositorio pero no me lo copia a mis
archivos

-git merge -> fusiona los cambios traidos al repositorio
con mis archivos o mi directorio

-git pull -> combina los dos comandos anteriores

_____________
ramas en Git
una rama en git es la linea de desarrollo, 
son todos los registros historicos de cambios que
hemos hecho en dicha versión. No es solo 
eso ya que tambien podemos crear nuevas ramas
independientes que son copias del ultimo commit
al las que la rama principal no tiene acceso
es decir es un versión alterna o un camino
distinto en el desarrollo.

-