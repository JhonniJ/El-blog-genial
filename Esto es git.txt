aquí vamos con git.
git es un sistema de control de versiones
guardo los cambios de un archivo en vez de guardar otro 
archivo

Lineas de comandos, atajos para hacer funciones en la
terminal:
- git init - > inicia el repositorio, base de datos donde
se guardan los cambios

- git add nombre del archivo - > agrega un archivo al 
repositorio

-git add . -> agrega todos los archivos de la carpeta al 
repositorio

- git commit -m "mensaje" - > envia los ultimos cambios
al repositorio, y "-m" añade un mensaje, no se puede enviar
un archivo sin un mensaje, nos abre una ventana llamada
vin, que es una editor que permite agregar el mensaje
para salir de Vin presiona esc+shit+zz

-git commit -am "mensaje" convina los dos comandos anteriores


-git status -> muestra el estado del repositorio, si hay
cambios que no hemos guardado nos informa

-git show -> muestra todos los cambios historicos de un
archivo, que cambios se hicieron, para salir de la
ventana se utiliza el control + Q

-git log nombre de archivo -> historia completa del
archivo

_____________
Instalar git en windows es fácil, en el navegador buscamos
git y descargamos, nos sercioragimos de que este
activada la opción gitbash y demás cositas curiosas
para acceder a la terminal de git, busca gitbash en los
archivos windowns

git permite el uso de archivo binario pero no es tan preciso,
lo mejor es usarlo en archivos de
texto plano, este documento por ejemplo o codigo.

_____________
lineas de comandos, esto es complicado
pwd -> muestra donde estamos

cd -> navegar carpetas

ls -> muestra los archivos de donde estamos

ls -al -> lista los archivos con el argumento de también
los ocultos

clear -> limpia la consola, control + L 

rm nombre del archivo -> remover o eliminar

mkdir nombre carpeta -> crea una carpeta

touch nombre de archivo -> crea un archivo vacio

cat nombre del archivo -> muestra el contenido del 
archivo 

history -> historial de comandos de hechos

git diff "commit a" "commit b" -> comando que compara 
la version a con la b, la primera comparación debe 
ser la antigua. además si tenemos un archivo en staging
y hacemos git diff podemos ver los cambios que tenemos
entre archivo agregado en stagin y el directorio

git log --stat -> muestra la historia de los archivos
con los cambios y con "q" salgo de la pantalla

_____________
Por defecto git requiere el nombre de usuario para
mandar los commits para solucionar esto entramos a git 
config --global (con doble guion se usa en palabras) 
user.name "nuestro nombre"


para volver a una versión anterior usamos git reset
(commit al que queremos volver) tenemos que 
especificar el tipo de reset:

--soft suave volvemos a tras pero si tenemos algo en 
stagin,un cambio agregado a la memoria pero no enviado
al repositorio.

--hard duro volvemos atras total sin posibilida de 
volver. elimina lo todos los demás commits

- git checkout "commit pasado" "nombre archivo"-> 
volvemos a una versión interior ya sea para verla
o actualizarla

_____________
Para trabajar de manera colaborativa se requiere que haya
un repositorio remoto donde va a estar el proyecto
unificado, puede ser Github, Gitlab o nuestro
propio servidor.
para traer el proyecto a tu maquina no se usa git init
se usa git clone url, es decir no vamos a iniciar un 
proyectoen nuestra maquina, nos vamos a traer un proyecto
del repositorio, este git clone traer todo todito tanto
los archivio como el respositorio, la base de datos 
atomica 
-git push -> envia los cambios de nuestro respositorio 
al repositorio remoto

-git fetch -> trae los cambios o actualizaciones
a nuestro repositorio pero no me lo copia a mis
archivos

-git merge -> fusiona los cambios traidos al repositorio
con mis archivos o mi directorio

-git pull -> combina los dos comandos anteriores

_____________
ramas en Git
una rama en git es la linea de desarrollo, 
son todos los registros historicos de cambios que
hemos hecho en dich archivo. No es solo 
eso ya que tambien podemos crear nuevas ramas
independientes que son copias del ultimo commit
al las que la rama principal no tiene acceso
es decir es un versión alterna o un caminobranck
distinto en el desarrollo.

-git branch "nombre de la rama" -> creamos la rama, 
cuando ya tenemos ramas creadas y usamos 
este comando sin el nombre nos muestra las ramas que 
tenemos y donde estamos

-git checkout "nombre de la rama" -> cambiamos entre
ramas

-git merge "nombre rama"para fusionar ramas se hace 
un merge, este se debe de hacer desde la rama principal

-para solucionar un conflicto simplemente debemos
escoger el cambio que se aplicara y hacer un commit

_____________
Github, superrepositorio remoto de git 
para hacer uso nos resgistramos en Github

creamos un repositorio en github para poder 
enlazarlo con nuestro repositorio local

buscamos la url del repositorio en github
la copiamos con https para darle a git un 
origen remoto de los archivos,
-git remote add origin "url"

-git remote -v --> nos muestra de manera verbal 
los origenes remotos

-git push origin master:main --> manda la rama master
al origen y fusionala con el main de github

/*github cambio el nombre de la rama principal de
master a main por eso lo hacemos así*/

antes de mandar nuestro repo al remoto es mejor 
traernos los cambios que hayan ocurrido en remoto

- git pull origin main --> nos traemos y fusionamos
la rama main del origen, esto por primera vez sale 
un error ya que lo de origen y lo nuestro son 
historias distintas para solucionarlo hacemos:

-git pull origin main --allow-unrelated-histories

ahora si podemos hacer el push
-git push origin master:main

_____________
cifrado asimetrico, llaves publicas y privadas
son cifrado que vincula matematicamente la llaves
la llave publica es el medio de como encripta la 
información y la llave privada de descifra la 
información 

esto se usa para conectarnos de manera segura a 
servidores, repositorios remotos

el uso de esta llaves es para hacer más fuerte y
sencilla el acceso a github, se hace conectandonos
por el protocolo ssh, es decir le digo y le mando a 
github la llave publica y a su vez github nos envia
su llave publica

las llaves ssh no nos por repositorios ni por 
proyectos son por personas

para crear las llaves ssh abrimos gitbash, nos aseguramos
de estar de el home, es decir en la raiz del documento
donde la virgulilla ~ y escribimos el siguiente comando
ssh-keygen -t rsa -b 4096 -C "j.j.avila.fig@gmail.com"

se requiere revisar si el servidor de llaves ssh 
esta corriendo, un programa que comprueba las conexiones
- eval $(ssh-agent -s)
esto nos genera la siguiente respuesta: "agent pid numero"
es decir el agente esta corriendo o esta en ejecución

ademas hay que decirle al entorno que la llave exista
es decir agregarla a la entorno
-ssh-add ~/.ssh id_rsa

despues de haber creado y añadido la llave hay que 
añardirla a github, en github abrimos configuraciones y en
la opción de llave ssh la seleccionamos le ponemos un 
titulo que es para decir a que equipo esta asociado, cada pc 
que tengas debe contar con su propia llave publica  y privada.
en el espacio de abajos pegamos la llave publica, copiamos su
contenido

en git tenemos que cambiar la url del origen esto se hace con
-git remote -v para ver que url remotas tenemos
para cambiarlo se hace con:
git remote set-url origin (url)

_____________
comando especial para ver la historia del proyecto de manera total,
grafica y decorada
-git log --all --graph --decorate --oneline
hay un truco llamado alias, son crear variables
alias (nombre)="git log --all --graph --decorate --oneline"

un tag que puede ser v0.1 es una forma de nombrar versiones
es decir agregar una tarjeta a una parte importante del 
proyecto
para agregar un tag necesitamos el hash del commit que comando
anterio podemos obtener la versión corta
-git tag -a (v0.1) -m "mensaje" (hash)
para poder ver cuales tags tenemos podemos usar el comando git tag

para ver que commit hace referencia un tag se usamos
-git show-ref --tags

_____________
lo divertido de los tags esta en publicarlos, para hacer esto
se usa el comando
-git push origin --tags -> es decir empujar al origen los tags
-git tag -d "nombre del tag a eliminar" -> elimina el tag
en local para eliminarlo en github se usa:
-git push origin :refs/tags/"nombre tag a eliminar"

para enviar diferentes ramas se usa
-git push origin "nombre de la rama"

_____________
un fork es un nuevo camino del desarrollo pero como si fuera otro
repositorio como colaborador, es decir no puede hacer merge ni commits
en el principal sin embargo puede clonarlo y hacer su propia versión
que es el fork que viene de tenedor y es otro camino, usa bifurcación.

para ser colaborador en un proyecto se le da una estrellita, un
visualización y se le da en fork, que hace un clon del proyecto 
publico en nuestra pagina de github
en la terminal nos ubicamos en donde queramos trabajar el proyecto
escribimos git clone y agregamos la dirección o la llave ssh

se puede hace un pull request, que es como un mensaje para el 
proyecto original, cuando le das close es como deje así, o seguir 
comentando.

a medida que el original cambia el fork se queda a tras, para actualizar
hay que traer los cambios, para hacer esto creamos otra rama (para hacer
pull) vamos al proyecto original en github y copiamos la ruta,
abrimos la consola escribimos:
-git remote add upstream (el nombre es opcional pero es común
 llamarlo así) y pegamos la url y al final hacemos un git pull

_____________
un deployment tener en un servidor web git y traer los archivos
obvio hay que clonar, hacer git pull, pero en escen